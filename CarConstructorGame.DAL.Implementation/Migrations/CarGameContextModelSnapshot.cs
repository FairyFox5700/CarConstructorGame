// <auto-generated />
using System;
using CarConstructorGame.Common;
using CarConstructorGame.DAL.Implementation.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CarConstructorGame.DAL.Implementation.Migrations
{
    [DbContext(typeof(CarGameContext))]
    partial class CarGameContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CarConstructorGame.Entities.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CarId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Distance")
                        .HasColumnType("float");

                    b.Property<bool>("IsMoving")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("money");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("CarConstructorGame.Entities.Detail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DetailId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("BuyPrice")
                        .HasColumnType("money");

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<int>("DetailType")
                        .HasColumnType("int");

                    b.Property<double>("ExpluatationStabilityCoef")
                        .HasColumnType("float");

                    b.Property<bool>("IsSuitableForRepairing")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<decimal>("RepairPrice")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.ToTable("Details");

                    b.HasDiscriminator<int>("DetailType");
                });

            modelBuilder.Entity("CarConstructorGame.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GameRating")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MoneySum")
                        .HasColumnType("money");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CarConstructorGame.Entities.Accamulator", b =>
                {
                    b.HasBaseType("CarConstructorGame.Entities.Detail");

                    b.Property<TimeSpan>("HoursOfWork")
                        .HasColumnType("time");

                    b.Property<double>("Power")
                        .HasColumnType("float");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("CarConstructorGame.Entities.Engine", b =>
                {
                    b.HasBaseType("CarConstructorGame.Entities.Detail");

                    b.Property<double>("CubicCapability")
                        .HasColumnType("float");

                    b.Property<double>("HorceForce")
                        .HasColumnType("float");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("CarConstructorGame.Entities.RimsComplect", b =>
                {
                    b.HasBaseType("CarConstructorGame.Entities.Detail");

                    b.Property<int>("Count")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(4);

                    b.Property<double>("Diameter")
                        .HasColumnType("float");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("CarConstructorGame.Entities.Car", b =>
                {
                    b.HasOne("CarConstructorGame.Entities.User", "User")
                        .WithMany("Cars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarConstructorGame.Entities.Detail", b =>
                {
                    b.HasOne("CarConstructorGame.Entities.Car", "Car")
                        .WithMany("Details")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarConstructorGame.Entities.User", b =>
                {
                    b.OwnsOne("CarConstructorGame.Entities.Age", "Age", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<int>("Value")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasDefaultValue(10);

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
